         Twisty, a text-adventure interpreter for Android.
         =================================================

What is this program?
---------------------

Twisty is a game interpreter for the Android operating system.
It allaws you to play "text adventures' on your mobile handset.

The z-machine is a virtual machine designed in 1979 by Infocom for
playing text adventures, and has been re-implemented on nearly every
computer and PDA since then.  This application allows Android users to
play Infocom classics just as 'Zork', as well hundreds of newer text
adventures written in the last ten years or so.

You can find numerous z-machine games to download at
http://ifarchive.org.  We also recommend visiting
http://www.ifwiki.org for general information on Interactive Fiction.


History
-------

The codebase originally began as an Android Activity constructed
around a heavily-hacked port of 'zplet', an early lightweight
z-machine interpreter written for Java 1.0.

 *** This project is now undergoing a huge rewrite! ***

We are now attempting to use Android's Native Development Kit (NDK) to
make JNI calls to various VM-interpreters running as C libraries.
This should give us a 7x speed improvement, and also allow us to
support a wider range of z-machines (via 'nitfol'), glulx games (via
'glulxe') and perhaps even TADS or other interpreters.

Specifically, we're using the GlkJNI project
(http://code.google.com/p/glkjni) to provide an abstract UI to the
various C interpreters.  GLK is a UI "abstraction layer" created by
Andrew Plotkin which can be implemented in any GUI toolkit, and GlkJNI
ports this abstraction to JNI via a set of java interfaces.  It then
provides an Android-specific implementation of those interfaces.  The
best C interpreters out there expect to use GLK for I/O, so this
allows us our pick of C interpreters.


Redistribution and Licensing
-----------------------------

Twisty is open source software, distributed under the GPL v3 license.
For details on Licensing, see the LICENSE file.

Patches are welcome!


Insalling the .apk
-------------------

The latest .apk can be downloaded directly from Google Code and pushed
via 'adb install', or just grab it from Android Market.  :-) The .apk
has a few sample games built in, but you can also load any z3, z5, or
z8 came from the SDcard.


Building from Source
--------------------

** For Developers Only.  Warning:  this is complex!


A.  Prerequisites

 1. The Android SDK (at least version 1.5), unpacked and ready to go.

 2. A working Eclipse installation (at least 3.x) with the latest
 Android plugin (ADT) installed, pointing to your Android SDK.

 3. The Android NDK (at least version 1.0) unpacked somewhere. (Say,
 at location $NDK)

 4. A copy of the Twisty codebase -- which you must already have if
 you're reading this.  (Say, at location $TWISTY.)

 5. A copy of the glkjni codebase at location $GLKJNI.  Either grab a
 release tarball or do an svn checkout:

   svn co http://glkjni.googlecode.com/svn/trunk $GLKJNI


B.  Assembling the Pieces

The Twisty codebase contains the main Twisty "activity", a few sample
games, and some C interpreters that expect to use GLK for I/O.  The
Twisty activity is essentially a high-level consumer of GlkJNI.

The GlkJNI codebase contains 'glkjni' (the C code implementing
GLK), as well as specific java implementations of these interfaces.
The one we care about is 'roboglk', which maps the interfaces to
Android's UI.

Assuming that these two codebases are installed at $TWISTY and
$GLKJNI, you need to make three symbolic links from your $NDK area:

  $NDK/sources/glkjni      --> $GLKJNI/glkjni
  $NDK/sources/twistyterps --> $TWISTY/twistyterps
  $NDK/apps/twisty         --> $TWISTY/twisty

This allows NDK to find the C code it needs and also the Eclipse
project it belongs to.


C.  Building the C code

To compile the core glkjni C code and the C interpreters into a single
shared library: 

   $ cd $NDK
   $ make APP=twisty

After compilation, the final libtwistyterps.so will be automatically
copied to the proper location within $TWISTY/twisty/ .


D.  Building the Java code

 1. Start a new "generic project" and choose "Android project".  In
    the following dialog box, choose "based on existing source" and
    then select $TWISTY/twisty/.

 2. Now open the project's properties (Project->Properties) and choose
    "Java Build Path" from the list on the left.  Then choose the
    'Source' tab and press the 'Link Source' button.  Navigate to
    $GLKJNI/roboglk and select that directory.  It should now appear
    in the list with $TWISTY/src and $TWISTY/gen.  Say OK.

